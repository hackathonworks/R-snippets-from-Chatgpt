# Load required packages
library(dplyr)

# Create data frames
df1 <- data.frame(Name = c("John", "Jane", "Jim", "Jenny", "Jack"),
                  Age = c(30, 25, 35, 28, 33),
                  Gender = c("Male", "Female", "Male", "Female", "Male"))
df2 <- data.frame(Name = c("Jane", "Jim", "Jenny", "Jerry", "Julie"),
                  Age = c(25, 35, 28, 40, 45),
                  Gender = c("Female", "Male", "Female", "Male", "Female"))

# Function to compare two data frames
compare_dfs_robust <- function(x, y, join_by) {
  # Ensure join by column exists in both data frames
  if (all(!(join_by %in% colnames(x))) || all(!(join_by %in% colnames(y)))) {
    stop("Join by column not found in one or both data frames.")
  }
  
  # Handle case where join by column is represented with different names
  join_by_x <- join_by
  join_by_y <- join_by
  for (col_x in colnames(x)) {
    for (col_y in colnames(y)) {
      if (col_x != col_y && 
          (str_detect(col_x, join_by) || str_detect(join_by, col_x)) && 
          (str_detect(col_y, join_by) || str_detect(join_by, col_y))) {
        join_by_x <- col_x
        join_by_y <- col_y
        break
      }
    }
  }
  
  # Join data frames
  joined_df <- full_join(x, y, by = c(join_by_x = join_by_y))
  
  # Identify dropped rows
  dropped_df <- x %>% 
    filter(!(join_by_x %in% joined_df[[join_by_x]]))
  
  # Get count of dropped rows and dropped unique profiles
  dropped_rows <- nrow(dropped_df)
  dropped_profiles <- length(unique(dropped_df[[join_by_x]]))
  
  # Get dropped IDs
  dropped_ids <- dropped_df[[join_by_x]]
  
  # Get count of excluded unique values in join by column
  excluded_count <- nrow(x) - nrow(joined_df)
  
  # Return results
  list(dropped_rows = dropped_rows,
       dropped_profiles = dropped_profiles,
       dropped_ids = dropped_ids,
       excluded_count = excluded_count,
       dropped_df = dropped_df)
}

# Test function with example data frames
result <- compare_dfs_robust(df1, df2, c("Name"))

# View results
result
